datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  NOTSPECIFIED
}

enum OrganizationType {
  EDUCATIONAL
  COMMITTEE
  NOTSPECIFIED
}

enum ContributionType {
  PERSON
  MEDIA
  FACT
  EVENT
  ORGANIZATION
  MEMORIAL
}

model User {
  id               String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
  firstName        String
  lastName         String
  email            String         @unique
  username         String         @unique
  password         String
  role             Role?          @default(USER)
  profilePicture   Media?         @relation(fields: [profilePictureId], references: [id])
  profilePictureId String?        @unique @db.ObjectId
  bio              String?
  gender           Gender         @default(value: NOTSPECIFIED)
  contributions    Contribution[]
  edits            Edit[]
  quotes           Quote[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("users")
}

model Person {
  id               String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
  firstName        String? // TODO: one of these 3 fields should have a value
  lastName         String?
  alias            String?
  gender           Gender         @default(value: NOTSPECIFIED)
  bio              String?
  born             DateTime?
  placeOfBirth     Location?      @relation("PlaceOfBirth", fields: [placeOfBirthId], references: [id])
  placeOfBirthId   String?        @unique @db.ObjectId
  died             DateTime?
  causeOfDeath     String?
  restingPlace     Location?      @relation("RestingPlace", fields: [restingPlaceId], references: [id])
  restingPlaceId   String?        @unique @db.ObjectId
  education        Organization[]
  occuptation      String?
  knownFor         String?
  awards           Award[]
  memorials        Memorial[]     @relation(fields: [memorialIds])
  memorialIds      String[]       @db.Array(ObjectId)
  media            Media[]        @relation("PersonMedia", fields: [mediaIds])
  mediaIds         String[]       @db.Array(ObjectId)
  profilePicture   Media?         @relation("PersonProfilePicture", fields: [profilePictureId], references: [id])
  profilePictureId String?        @unique @db.ObjectId
  events           Event[]        @relation(fields: [eventIds])
  eventIds         String[]       @db.Array(ObjectId)
  facts            Fact[]         @relation(fields: [factIds])
  factIds          String[]       @db.Array(ObjectId)
  contribution     Contribution   @relation(fields: [contributionId], references: [id])
  contributionId   String         @db.ObjectId
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("people")
}

model Media {
  id                   String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type                 MediaType
  caption              String?
  url                  String
  publicId             String
  event                Event?       @relation(fields: [eventId], references: [id])
  eventId              String?      @db.ObjectId
  fact                 Fact?        @relation(fields: [factId], references: [id])
  factId               String?      @db.ObjectId
  location             Location?    @relation(fields: [locationId], references: [id])
  locationId           String?      @db.ObjectId
  personMedia          Person[]     @relation("PersonMedia", fields: [personIds])
  personIds            String[]     @db.Array(ObjectId)
  personProfilePicture Person?      @relation("PersonProfilePicture")
  userProfilePicture   User?
  contribution         Contribution @relation(fields: [contributionId], references: [id])
  contributionId       String       @db.ObjectId
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@map("media")
}

model Fact {
  id             String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  text           String
  sources        String[]     @db.Array(String)
  people         Person[]     @relation(fields: [personIds])
  personIds      String[]     @db.Array(ObjectId)
  locations      Location[]   @relation(fields: [locationIds])
  locationIds    String[]     @db.Array(ObjectId)
  media          Media[]
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("facts")
}

model Event {
  id             String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name           String
  date           DateTime
  locations      Location[]
  people         Person[]     @relation(fields: [personIds])
  personIds      String[]     @db.Array(ObjectId)
  media          Media[]
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("events")
}

model Organization {
  id             String           @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name           String
  type           OrganizationType @default(value: NOTSPECIFIED)
  headQuarters   Location         @relation(fields: [headQuartersId], references: [id])
  headQuartersId String           @db.ObjectId
  website        String?
  award          Award[]
  Person         Person[]         @relation(fields: [personIds])
  personIds      String[]         @db.Array(ObjectId)
  contribution   Contribution     @relation(fields: [contributionId], references: [id])
  contributionId String           @db.ObjectId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("organizations")
}

model Location {
  id                 String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
  coordinates        Float[]        @db.Array(Double) // TODO: should be of type Point when support lands in Prisma - https://docs.mongodb.com/manual/reference/geojson/
  address            Json? // TODO: should be an embedded type when support lands - https://www.notion.so/Prisma-Roadmap-50766227b779464ab98899accb98295f?p=59064796f8dc4beab2c3b69df56d2244 https://github.com/prisma/prisma/issues/1798#issuecomment-951256487
  media              Media[]
  event              Event?         @relation(fields: [eventId], references: [id])
  eventId            String?        @db.ObjectId
  organization       Organization[]
  award              Award[]
  memorial           Memorial[]
  facts              Fact[]         @relation(fields: [factIds])
  factIds            String[]       @db.Array(ObjectId)
  personPlaceOfBirth Person?        @relation("PlaceOfBirth")
  personRestingPlace Person?        @relation("RestingPlace")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("locations")
}

model Award {
  id             String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name           String
  awardedFor     String
  location       Location?    @relation(fields: [locationId], references: [id])
  locationId     String?      @db.ObjectId
  presentedBy    Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  firstAwarded   DateTime
  awardedTo      Person?      @relation(fields: [personId], references: [id])
  personId       String?      @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("awards")
}

model Memorial {
  id             String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  location       Location     @relation(fields: [locationId], references: [id])
  locationId     String       @db.ObjectId
  designer       String
  material       String?
  height         String?
  completionDate DateTime?
  openingDate    DateTime?
  memorials      Person[]     @relation(fields: [dedicatedToIds])
  dedicatedToIds String[]     @db.Array(ObjectId)
  website        String?
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("memorials")
}

model Quote {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  text      String
  quotee    User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotes")
}

model Contribution {
  id            String           @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type          ContributionType
  approved      Boolean          @default(false)
  user          User             @relation(fields: [userId], references: [id])
  userId        String           @db.ObjectId
  people        Person[]
  media         Media[]
  memorials     Memorial[]
  organizations Organization[]
  events        Event[]
  facts         Fact[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("contributions")
}

model Edit {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  approved  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("edits")
}
